package com.mylocket.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.mylocket.service.SupabaseDatabaseService
import com.mylocket.service.SupabaseStorageService
import com.mylocket.data.Post
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import java.io.File

class PostViewModelFactory(private val uid: String): ViewModelProvider.Factory{
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(PostViewModel::class.java)){
            return PostViewModel(uid) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}

class PostViewModel(private val uid: String): ViewModel() {
    private val databaseService = SupabaseDatabaseService()
    private val storageService = SupabaseStorageService()

    private val _posts = MutableStateFlow<List<Post>>(emptyList())
    val posts: StateFlow<List<Post>>
        get() = _posts

    init {
        loadPosts()
        listenForPostUpdates()
    }

    private fun loadPosts() {
        viewModelScope.launch {
            Log.d("PostViewModel", "Loading posts for user: $uid")
            val result = databaseService.getPostsForUser(uid)
            if (result.isSuccess) {
                val posts = result.getOrNull() ?: emptyList()
                Log.d("PostViewModel", "Loaded ${posts.size} posts for user $uid")
                posts.forEach { post ->
                    Log.d("PostViewModel", "Post: id=${post.id}, photo=${post.photo}, content=${post.content}")
                }
                _posts.value = posts.sortedByDescending { it.time }
            } else {
                Log.e("PostViewModel", "Failed to load posts for user $uid", result.exceptionOrNull())
                _posts.value = emptyList()
            }
        }
    }

    private fun listenForPostUpdates(){
        viewModelScope.launch {
            databaseService.observePostsForUser(uid).collect { newPosts ->
                // Update the current list with new posts
                val currentPosts = _posts.value.toMutableList()
                newPosts.forEach { newPost ->
                    val existingIndex = currentPosts.indexOfFirst { it.id == newPost.id }
                    if (existingIndex >= 0) {
                        currentPosts[existingIndex] = newPost
                    } else {
                        currentPosts.add(newPost)
                    }
                }
                _posts.value = currentPosts.sortedByDescending { it.time }
            }
        }
    }

    fun addPost(content: String, photo:String, toWho: List<String>){
        viewModelScope.launch {
            val post = Post(
                id = "", // Will be generated by Supabase
                content = content,
                photo = photo,
                toWho = toWho,
                userId = uid
            )
            val result = databaseService.addPost(post)
            if (result.isSuccess) {
                Log.d("Add Post", "Post added successfully")
                // Refresh posts
                loadPosts()
            } else {
                Log.e("Add Post", "Error adding post", result.exceptionOrNull())
            }
        }
    }

    /**
     * Upload image and add post in a single operation using viewModelScope
     * This prevents cancellation when user leaves the screen
     */
    fun uploadAndAddPost(
        file: File,
        content: String,
        toWho: List<String>,
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        viewModelScope.launch {
            try {
                Log.d("PostViewModel", "Starting image upload...")

                // Upload image first
                val uploadResult = storageService.uploadImage(file)

                if (uploadResult.isSuccess) {
                    val downloadUrl = uploadResult.getOrNull()!!
                    Log.d("PostViewModel", "Image uploaded successfully: $downloadUrl")

                    // Create and add post
                    val post = Post(
                        id = "", // Will be generated by Supabase
                        content = content,
                        photo = downloadUrl,
                        toWho = toWho,
                        userId = uid
                    )

                    val postResult = databaseService.addPost(post)
                    if (postResult.isSuccess) {
                        Log.d("PostViewModel", "Post added successfully")
                        loadPosts() // Refresh posts
                        onSuccess()
                    } else {
                        Log.e("PostViewModel", "Error adding post", postResult.exceptionOrNull())
                        onError("Không thể tạo bài đăng: ${postResult.exceptionOrNull()?.message}")
                    }
                } else {
                    Log.e("PostViewModel", "Error uploading image", uploadResult.exceptionOrNull())
                    onError("Không thể tải ảnh lên: ${uploadResult.exceptionOrNull()?.message}")
                }
            } catch (e: Exception) {
                Log.e("PostViewModel", "Unexpected error in uploadAndAddPost", e)
                onError("Lỗi không mong muốn: ${e.message}")
            }
        }
    }
}

